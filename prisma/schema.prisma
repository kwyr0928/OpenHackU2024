// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id     String @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  nextMoning   NextMoning[]
  allPerset    AllPerset[]
  timePerset   TimePerset[]
  folderPerset FolderPerset[]
  taskPerset   TaskPerset[]
  session      Session[]
  account      Account[]
}

model NextMoning {
  id          Int       @id @default(autoincrement())
  userId      String
  updateTime  DateTime
  allPresetId Int
  user        User      @relation(fields: [userId], references: [id])
  allPreset   AllPerset @relation(fields: [allPresetId], references: [id]) //1-1
}

// 全体プリセット
model AllPerset {
  id            Int         @id @default(autoincrement())
  userId        String
  name          String?     @default("カスタム")
  resultTime    DateTime    @db.Time
  timePresetId  Int
  presetOrderId Int
  user          User        @relation(fields: [userId], references: [id])
  timePreset    TimePerset  @relation(fields: [timePresetId], references: [id]) //1-1
  presetOrder   PresetOrder @relation(fields: [presetOrderId], references: [id]) //1-many

  nextMoning NextMoning[]
}

// プリセット順序
model PresetOrder {
  id             Int  @id @default(autoincrement())
  pos            Int
  type           Int // folder:0 or task:1
  folderPresetId Int?
  taskPersetId   Int?

  folderPerset FolderPerset? @relation(fields: [folderPresetId], references: [id]) //01-1
  taskPerset   TaskPerset?   @relation(fields: [taskPersetId], references: [id]) //01-1
  allPerset    AllPerset[]
}

// 時間プリセット
model TimePerset {
  id     Int      @id @default(autoincrement())
  userId String
  name   String   @default("カスタム")
  time   DateTime @db.Time
  user   User     @relation(fields: [userId], references: [id])

  allPerset AllPerset[]
}

// フォルダプリセット
model FolderPerset {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  name   String @default("カスタム")

  tasksInFolder TasksInFolder[]
  presetOrder   PresetOrder[]
}

// タスクプリセット
model TaskPerset {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id])
  userId       String
  name         String @default("カスタム")
  static       Int // 固定値:0 オプションあり:1
  minute       Int? // 固定値の場合
  taskOptionId Int[] //このタスクが持つオプション一覧

  presetOrder   PresetOrder[]
  tasksInFolder TasksInFolder[]
}

// タスクオプション
model TaskOption {
  id     Int    @id @default(autoincrement())
  name   String
  minute Int

  tasksInFolder TasksInFolder[]
}

// 中間テーブル(フォルダーの中身)
model TasksInFolder {
  id             Int          @id @default(autoincrement())
  folderPresetId Int
  taskPresetId   Int
  taskOptionId   Int
  folderPreset   FolderPerset @relation(fields: [folderPresetId], references: [id])
  taskPreset     TaskPerset   @relation(fields: [taskPresetId], references: [id])
  taskOption     TaskOption   @relation(fields: [taskOptionId], references: [id])
}

// NextAuth関連
model Account {
  id                       Int     @id @default(autoincrement())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/////////////////////////////////////////
// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// // Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? @db.Text
//     access_token             String? @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     refresh_token_expires_in Int?

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     posts         Post[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
