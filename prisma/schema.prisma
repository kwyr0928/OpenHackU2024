// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  session Session[]
  account Account[]
  Item    Item[]

  TimeSet TimeSet[]
}

model Item {
  id         String   @id @default(cuid())
  userId     String
  setNext    Boolean  @default(false) // 設定中でtrue
  itemType   Int // 全体0, フォルダ1, タスク2
  parentId   String? //Itemsのidを持つ
  order      Int      @default(0) //順序
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  item      Item?       @relation(name: "itemParents", fields: [parentId], references: [id])
  WholeSet  WholeSet[]
  FolderSet FolderSet[]
  TaskSet   TaskSet[]
  Items     Item[]      @relation(name: "itemParents")
}

model WholeSet {
  id         String   @id @default(cuid())
  itemId     String
  timeSetId  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  item    Item    @relation(fields: [itemId], references: [id])
  timeSet TimeSet @relation(fields: [timeSetId], references: [id])
}

model TimeSet {
  id         String   @id @default(cuid())
  userId     String
  name       String   @default("カスタム")
  time       DateTime @db.Time()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  WholeSet WholeSet[]
}

model FolderSet {
  id         String   @id @default(cuid())
  itemId     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  item Item @relation(fields: [itemId], references: [id])
}

model TaskSet {
  id         String   @id @default(cuid())
  itemId     String
  optionId   String? // フォルダ,全体プリセットに設定中のオプション
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  item       Item         @relation(fields: [itemId], references: [id])
  taskOption TaskOption?  @relation(name: "select", fields: [optionId], references: [id])
  TaskOption TaskOption[]
}

model TaskOption {
  id         String   @id @default(cuid())
  name       String
  optionTime Int // n分
  taskId     String //所属タスク
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  task    TaskSet   @relation(fields: [taskId], references: [id])
  TaskSet TaskSet[] @relation(name: "select")
}

// NextAuth関連
model Account {
  id                       Int     @id @default(autoincrement())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
